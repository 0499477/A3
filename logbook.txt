	1  ：Read the data of each section from the standard input.
    2   ：Modify the code to solve the problem of not being able to hand in the score.
    3   ：Modify the code again to solve the problem of not being able to hand in the score.
    4  : Resubmit the code to solve the problem of not being able to hand in the score.
    5  : Read the title carefully and find the problem with the file name. Modify the file name.
    6  : There was a small score distribution issue in the last submission, and there was a lack of configuration problems. Please make some modifications.
    7  : There are still configuration issues missing. Modify it again.
    8  : There are still configuration issues missing. Modify it again.
    9  : There are still configuration issues missing. Modify it again.
    10 : There are still configuration issues missing. Modify it again.
    11 : There are still configuration issues missing. Modify it again.
    12 : There are still configuration issues missing. Modify it again.
    13 : There are still configuration issues missing. Modify it again.
    14 : There are still configuration issues missing. Modify it again.
    15 : There are still configuration issues missing. Modify it again.
    16 : There are still configuration issues missing. Modify it again.
    17 : There are still configuration issues missing. Modify it again.
    18 : There are still configuration issues missing. Modify it again.
    19 : There are still configuration issues missing. Modify it again.
    20 : Read the data of each section from the standard input.
    21 : Define the Edge class to store the distance information between adjacent routers.
    22 : Define the NetGraph class to manage the routes and edges in the network, and implement the functions for adding routes and edges.
    23 : Update the add_edge function to ensure that all routers involved in the link update are added to the router table.
    24 : Format the code using VSCode.
    25 : In the main function, read the input and call the functions of NetGraph to add routers or perform link updates.
    26 : Add the run_distance_vector_algorithm() function interface, which needs to implement the distance vector update and print the update process and the final routing table in the given format.
    27 : In the Router class, define the functions for printing the distance table and routing table, and define the function for updating the current distance table using the neighbors' distance tables.
    28 : Implement the initialization of the distance vector table, updating the distance vector of routers to their neighboring nodes using the directly adjacent edges in the network.
    29 : Implement the update of the distance vector table, read the distance vectors of neighboring nodes, 
         and update the distance vector using the formula D_x(y) = C_x(u) + D_u(y). 
         This is the core of the distance vector algorithm, 
         allows routers to learn their distances to other nodes through their neighbors' distance tables
    30 : Implement the printing of the distance vector table, printing the distance table in the same format as the sample output.