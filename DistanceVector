#!/usr/bin/env python3
from typing import Dict, List, TypeAlias, Tuple

# (dest, next_hop): distance
DistanceTable: TypeAlias = Dict[Tuple[str, str], int]

class Router:
    def __init__(self, name: str):
        self.name: str = name
        self.DV:DistanceTable = {}
        self.old_DV:DistanceTable = {}
        return

    def update_dv_from_neighbor(self, neighbor:'Router', cost:int):
        """
            Read distance vector from neighbor, and update self's distance vector.
        """
        next_hop:str = neighbor.name
        for (dest, _), distance in neighbor.old_DV.items():
            if dest == self.name:
                continue
            # D_x(y) = min{ C_x(u) + D_u(y) }
            distance += cost
            dv_key = (dest, next_hop)
            
            if dv_key not in self.DV:
                self.DV[dv_key] = distance
            elif self.DV[dv_key] > distance:
                self.DV[dv_key] = distance
        return
    
    def print_distance_table(self, t:int, routers:List[str]):
        if self.name in routers:
            routers.remove(self.name)
        
        print(f'Distance Table of router {self.name} at t={t}:')
        # print header
        print('', *routers, sep='\t')
        for dest in routers:
            if dest == self.name:
                continue
            # print destination and distance via next_hop
            print(dest, end='\t')
            for next_hop in routers:
                if next_hop == self.name:
                    continue
                d = self.DV.get((dest, next_hop), 'INF')
                print(d, end='\t')
            print()
        print()
        return

    def _get_route_to_d(self, dest:str):
        # find the route to destination
        route = list(filter(lambda x: x[0] == dest, self.DV.keys()))
        if len(route) == 0:
            return 'INF', 'INF'
        
        # find the route that have minimum distance
        best_route = min(route, key=lambda x: (self.DV[x], x[1]) )
        distance = self.DV[best_route]
        next_hop = best_route[1]
        return next_hop, distance
        
    def print_route_table(self, routers:List[str]):
        routers.remove(self.name)
        print(f'Routing Table of router {self.name}:')
        for dest in routers:
            next_hop, distance = self._get_route_to_d(dest)
            print(f"{dest},{next_hop},{distance}")
        print()
        return

class Edge:
    def __init__(self, router1: 'Router', router2: 'Router', cost: int):
        self.router1: Router = router1
        self.router2: Router = router2

        # Set in alphabetical order
        if self.router1.name > self.router2.name:
            self.router1, self.router2 = self.router2, self.router1
        self.cost: int = cost

    def __str__(self) -> str:
        return str((self.router1.name, self.router2.name))


class NetGraph:
    def __init__(self):
        self.routers: Dict[str, Router] = {}
        self.edges: Dict[str, Edge] = {}
        self.t:int = 0

    def add_router(self, name: str) -> Router:
        """
            Add router to the network if notexist, return the router object
        """
        if name not in self.routers:
            self.routers[name] = Router(name)
        return self.routers[name]

    def add_edge(self, line: str) -> None:
        r1_name, r2_name, cost = line.split(' ')
        # Add router if router not exist
        r1 = self.add_router(r1_name)
        r2 = self.add_router(r2_name)
        cost = int(cost)

        # Create a Edge object
        edge = Edge(r1, r2, cost)
        edge_key = str(edge)
        self.edges[edge_key] = edge

        # If cost = -1, remove the edge
        if cost == -1:
            self.edges.pop(edge_key)
        return
    
    def dv_copy(self):
        """
            Copy the router's DV to old_DV, and clear DV
        """
        for router in self.routers.values():
            router.old_DV = router.DV
            router.DV = {}
        return
    
    def dv_init(self):
        """
            Use edge information to directly set the router's distance table to it's neighbour
        """        
        for edge in self.edges.values():
            r1, r2 = edge.router1, edge.router2
            r1.DV[(r2.name, r2.name)] = edge.cost
            r2.DV[(r1.name, r1.name)] = edge.cost
        return
    
    def dv_update(self) -> bool:
        """
            Update using the distance table information of neighbor nodes
            return true if any router updated the distance vector table
        """
        for edge in self.edges.values():
            r1, r2 = edge.router1, edge.router2
            r1.update_dv_from_neighbor(neighbor=r2, cost=edge.cost)
            r2.update_dv_from_neighbor(neighbor=r1, cost=edge.cost)
        
        # Test if any router update distance vector table
        have_update = any([r.DV != r.old_DV for r in self.routers.values()])
        return have_update
    
    def get_routers_sorted(self):
        return list(sorted(self.routers.keys()))
    
    def print_distance_table(self):
        # Print the distance table in alphabetical order of routers
        for router_name in self.get_routers_sorted():
            self.routers[router_name].print_distance_table(self.t, self.get_routers_sorted())
        self.t += 1
        return
    
    def check_update(self):
        pass
    
    def print_route_table(self):
        # Print the route table in alphabetical order of routers
        for router_name in self.get_routers_sorted():
            self.routers[router_name].print_route_table(self.get_routers_sorted())
        return
    
    def run_distance_vector_algorithm(self):
        """
            Run the distance vector algorithm until convergence
        """
        while True:
            self.dv_copy()
            self.dv_init()
            if self.dv_update():
                self.print_distance_table()
            else:
                break
        self.print_route_table()
        return

def read_until_(stop_line: str):
    # Read data from standard input
    data = []
    while True:
        line = input().strip()
        if line == stop_line:
            break
        data.append(line)
    return data


def main():
    nx = NetGraph()
    # Add router
    init_section = read_until_(stop_line='START')
    for name in init_section:
        nx.add_router(name)
        
    # Link update
    start_section = read_until_(stop_line='UPDATE')
    for line in start_section:
        nx.add_edge(line)
    nx.run_distance_vector_algorithm()
        
    # UPDATE section
    update_section = read_until_(stop_line='END')
    for line in update_section:
        nx.add_edge(line)
    
    if len(update_section) > 0:
        nx.run_distance_vector_algorithm()

    return

if __name__ == '__main__':
    main()

